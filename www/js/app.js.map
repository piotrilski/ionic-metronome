{"version":3,"sources":["app.js","app.routes.js","metronome/metronome.component.js","metronome/metronome.controller.js","metronome/metronome.service.js","metronome/metronome-bpm-selector/metronome-bpm-selector.component.js","metronome/metronome-bpm-selector/metronome-bpm-selector.controller.js","metronome/metronome-menu/metronome-menu.component.js","metronome/metronome-menu/metronome-menu.controller.js","metronome/metronome-note-selector/metronome-note-selector.component.js","metronome/metronome-note-selector/metronome-note-selector.controller.js"],"names":["angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","config","$stateProvider","$urlRouterProvider","otherwise","state","url","views","template","component","templateUrl","controller","controllerAs","MetronomeController","$inject","metronomeService","vm","audioContext","bufferPercentageGap","frequency","high","mid","low","isPlaying","bpm","note","conf","minBpmValue","maxBpmValue","$onInit","onInit","onBpmChange","onNoteChange","play","AudioContext","interval","stop","start","playNote","startTime","noteLength","osc","createOscillator","connect","destination","value","factory","MetronomeService","service","Object","freeze","bps","intervalBuffer","bindings","MetronomeBpmSelectorController","changeBpm","inpt","increase","parseInt","MetronomeMenuController","MetronomeNoteSelectorController","changeNote"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\r\n    'use strict';\r\n\r\n\tangular\r\n\t\t.module('metronome', ['ionic'])\r\n\t\t.run(function($ionicPlatform) {\r\n\t\t\t$ionicPlatform.ready(function() {\r\n\t\t\t\tif(window.cordova && window.cordova.plugins.Keyboard) {\r\n\t\t\t\t\t// Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\r\n\t\t\t\t\t// for form inputs)\r\n\t\t\t\t\tcordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\r\n\r\n\t\t\t\t\t// Don't remove this line unless you know what you are doing. It stops the viewport\r\n\t\t\t\t\t// from snapping when text inputs are focused. Ionic handles this internally for\r\n\t\t\t\t\t// a much nicer keyboard experience.\r\n\t\t\t\t\tcordova.plugins.Keyboard.disableScroll(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(window.StatusBar) {\r\n\t\t\t\t\tStatusBar.styleDefault();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t})\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n\tangular\r\n\t\t.module('metronome', [ 'ionic' ])\r\n        .config(($stateProvider, $urlRouterProvider) => {\r\n            $urlRouterProvider.otherwise('/');\r\n            $stateProvider\r\n                .state('index', {\r\n                    url: '/',\r\n                    views: {\r\n                        'leftMenu': { template: '<pi-metronome-menu></pi-metronome-menu>' },\r\n                        'main': { template: '<pi-metronome></pi-metronome>' }\r\n                    }\r\n                });\r\n        });\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .component('piMetronome', {\r\n            templateUrl: 'metronome/metronome.html',\r\n            controller: 'MetronomeController',\r\n            controllerAs: 'mc'\r\n        });\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .controller('MetronomeController', MetronomeController);\r\n\r\n    MetronomeController.$inject = ['metronomeService'];\r\n\r\n    function MetronomeController(metronomeService) {\r\n        let vm = this;\r\n        let audioContext = null;\r\n        \r\n        const bufferPercentageGap = 0.1;\r\n        const frequency = {\r\n            high: 880,\r\n            mid: 440,\r\n            low: 220,\r\n        };\r\n\r\n        vm.isPlaying = false;\r\n        vm.bpm = 120;\r\n        vm.note = 4; \r\n        vm.conf = {\r\n            minBpmValue: 0,\r\n            maxBpmValue: 300\r\n        };\r\n\r\n        vm.$onInit = onInit;\r\n        vm.onBpmChange = onBpmChange;\r\n        vm.onNoteChange = onNoteChange;\r\n        vm.play = play;\r\n\r\n        function onInit() {\r\n            audioContext = new AudioContext();\r\n        }\r\n\r\n        function onNoteChange(note) {\r\n            vm.note = note;\r\n        }\r\n\r\n        function onBpmChange(bpm) {\r\n            vm.bpm = bpm;\r\n        }\r\n\r\n        \r\n        let interval = null;\r\n\r\n        function play() {      \r\n            if(vm.isPlaying) {\r\n                metronomeService.stop();\r\n                vm.isPlaying = false;\r\n            } else {\r\n                metronomeService.start(vm.bpm);\r\n                vm.isPlaying = true;\r\n            }\r\n\r\n            // if(isPlaying && interval) {\r\n            //     $interval.cancel(interval);\r\n\r\n            //     interval = null;\r\n            //     isPlaying = false;\r\n            // } else {\r\n            //     let bps = vm.bpm / 60.0;\r\n            //     let intervalBuffer = 1000.0 / bps;\r\n  \r\n            //     isPlaying = true;\r\n            //     interval = $interval(() => {\r\n            //         let intervalBufferInSek = intervalBuffer/1000;\r\n            //         let singleBufferTime = intervalBufferInSek/vm.note;\r\n            //         let startTime = audioContext.currentTime;\r\n            //         let endTime = startTime + intervalBufferInSek;\r\n            //         let tick = 1;\r\n\r\n            //         while(startTime < endTime) {\r\n            //             let freq = tick === 1 ? frequency.high : frequency.mid;\r\n                        \r\n            //             playNote(startTime, audioContext, freq);\r\n\r\n            //             tick++;\r\n            //             startTime += singleBufferTime;\r\n            //         }                   \r\n            //     }, intervalBuffer);\r\n            // }\r\n        } \r\n                \r\n        function playNote(startTime, audioContext, frequency) {            \r\n            let noteLength = 0.05;             \r\n            let osc = audioContext.createOscillator();\r\n            \r\n            osc.connect(audioContext.destination);\r\n            osc.frequency.value = frequency;\r\n            osc.start(startTime);\r\n            osc.stop(startTime + noteLength);\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .factory('metronomeService', MetronomeService);\r\n\r\n    MetronomeService.$inject = [];\r\n\r\n    function MetronomeService() {\r\n        let service = Object.freeze({\r\n            start: start,\r\n            stop: stop\r\n        });\r\n\r\n        return service;\r\n\r\n        function start(bpm) {\r\n            let bps = bpm / 60.0;\r\n            let intervalBuffer = 1000.0 / bps;\r\n\r\n            \r\n        }\r\n\r\n        function stop() {\r\n\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .component('piMetronomeBpmSelector', {\r\n            templateUrl: 'metronome/metronome-bpm-selector/metronome-bpm-selector.html',\r\n            bindings: {\r\n                bpm: '<',\r\n                conf: '<',\r\n                onBpmChange: '&'\r\n            },\r\n            controller: 'MetronomeBpmSelectorController',\r\n            controllerAs: 'mbsc'\r\n        });\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .controller('MetronomeBpmSelectorController', MetronomeBpmSelectorController);\r\n\r\n    MetronomeBpmSelectorController.$inject = [];\r\n\r\n    function MetronomeBpmSelectorController() {\r\n        let vm = this;\r\n        \r\n        vm.changeBpm = changeBpm;\r\n        vm.$onInit = onInit;\r\n\r\n        function onInit() {\r\n\r\n        }\r\n\r\n        function changeBpm(inpt, increase) {\r\n            let bpm = parseInt(inpt, 10);\r\n\r\n            if(increase) {\r\n                vm.bpm = bpm < vm.conf.maxBpmValue ? \r\n                    bpm + 1 : vm.conf.maxBpmValue;\r\n            } else {\r\n                vm.bpm = bpm > vm.conf.minBpmValue ? \r\n                    bpm - 1 : vm.conf.minBpmValue;\r\n            }\r\n\r\n            vm.onBpmChange({bpm: vm.bpm});\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .component('piMetronomeMenu', {\r\n            templateUrl: 'metronome/metronome-menu/metronome-menu.html',\r\n            bindings: {},\r\n            controller: 'MetronomeMenuController',\r\n            controllerAs: 'mmc'\r\n        });\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .controller('MetronomeMenuController', MetronomeMenuController);\r\n\r\n    MetronomeMenuController.$inject = [];\r\n\r\n    function MetronomeMenuController() {\r\n        let vm = this;\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .component('piMetronomeNoteSelector', {\r\n            templateUrl: 'metronome/metronome-note-selector/metronome-note-selector.html',\r\n            bindings: {\r\n                note: '<',\r\n                onNoteChange: '&'\r\n            },\r\n            controller: 'MetronomeNoteSelectorController',\r\n            controllerAs: 'mc'\r\n        });\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular.module('metronome')\r\n        .controller('MetronomeNoteSelectorController', MetronomeNoteSelectorController);\r\n\r\n    MetronomeNoteSelectorController.$inject = [];\r\n\r\n    function MetronomeNoteSelectorController() {\r\n        let vm = this;\r\n        \r\n        vm.changeNote = changeNote;\r\n         \r\n        function changeNote(inpt) {\r\n            let note = parseInt(inpt, 10);\r\n\r\n            vm.onNoteChange({note: vm.note});\r\n        }\r\n    }\r\n})();"]}